<?php

/**
 * @file
 * This is the module that processes image color data.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\img_processor\Event\MediaPresaveEvent;
use Drupal\media\MediaInterface;

/**
 * Implements hook_entity_presave().
 */
function img_processor_entity_presave(EntityInterface $entity) {
  if ($entity instanceof MediaInterface) {
    // Instantiate our event.
    $event = new MediaPresaveEvent($entity);

    // Get the event_dispatcher service and dispatch the event.
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($event, MediaPresaveEvent::EVENT_NAME);
  }
}

/**
 * Implements hook_entity_insert().
 */
function img_processor_entity_insert(EntityInterface $entity) {
  if ($entity instanceof MediaInterface) {
    img_processor_media_update_processor_data($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function img_processor_entity_update(EntityInterface $entity) {
  if ($entity instanceof MediaInterface) {
    img_processor_media_update_processor_data($entity);
  }
}

/**
 * Process Media items when they are saved.
 */
function img_processor_media_update_processor_data(EntityInterface $entity) {
  if ($entity instanceof MediaInterface && isset($entity->img_processor_data)) {
    $connection = \Drupal::database();

    // Delete old records.
    // phpcs:ignore
    $delete_num = $connection->delete('img_processor_data')
      ->condition("mid", $entity->id())
      ->execute();

    // Add new records.
    $insert = $connection->insert('img_processor_data')
      // ->fields($entity->img_processor_data)
      ->fields([
        'mid',
        'bin_color',
        'media_color',
        'color_distance',
        'hue_distance',
      ]);
    foreach ($entity->img_processor_data as $row) {
      $row['mid'] = $entity->id();
      $insert->values($row);
    }

    $insert->execute();
  }
}

/**
 * Implements hook_entity_load().
 */
function img_processor_entity_load(array $entities, $entity_type_id) {
  foreach ($entities as $entity) {
    if ($entity instanceof MediaInterface) {
      $database = \Drupal::database();
      $query = $database->query("SELECT * FROM {img_processor_data} WHERE mid = " . $entity->id());

      $result = $query->fetchAll(PDO::FETCH_ASSOC);
      $entity->img_processor_data = $result;
    }
  }
}

/**
 * Cron callback.
 */
function img_processor_process_avg_color_queue($cron_job, $total = 10000) {
  img_processor_process_queue('img_processor.avg_color', $total);
}

/**
 * Cron callback.
 */
function img_processor_process_color_palette_queue($cron_job, $total = 10000) {
  img_processor_process_queue('img_processor.color_palette', $total);
}

/**
 * Cron callback.
 */
function img_processor_process_histogram_queue($cron_job, $total = 10000) {
  img_processor_process_queue('img_processor.histogram', $total);
}

/**
 * Cron callback.
 */
function img_processor_process_luminance_queue($cron_job, $total = 10000) {
  img_processor_process_queue('img_processor.luminance', $total);
}

/**
 * Cron callback.
 */
function img_processor_process_std_deviation_queue($cron_job, $total = 10000) {
  img_processor_process_queue('img_processor.std_deviation', $total);
}

/**
 * Process ...
 */
function img_processor_process_queue($queue_id, $total = 10000) {

  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get($queue_id);

  $queue_manager = \Drupal::service('plugin.manager.queue_worker');
  $queue_worker = $queue_manager->createInstance($queue_id);

  $start = time();

  // Run for 25 seconds or 10000 items.
  $count = 1;
  while ((time() - $start) < 25 && $count <= $total) {
    $item = $queue->claimItem();
    if ($item) {
      try {
        $queue_worker->processItem($item->data);
        $queue->deleteItem($item);
      }
      catch (SuspendQueueException $e) {
        $queue->releaseItem($item);
        $variables = Error::decodeException($e);

        \Drupal::logger('img_processor')->log(RfcLogLevel::ERROR, t('[@queue] error processing item from queue (@queue | @q_item_id): SuspendQueueException', [
          '@q_item_id' => $item->item_id,
          '@queue' => $queue_id,
        ]), $variables);
        break;
      }
      catch (\Exception $e) {
        $variables = Error::decodeException($e);
        \Drupal::logger('img_processor')->log(RfcLogLevel::ERROR, t('[@queue] error processing item from queue (@queue | @q_item_id): @error_message', [
          '@q_item_id' => $item->item_id,
          '@queue' => $queue_id,
          '@error_message' => $e->getMessage(),
        ]), $variables);
      }
    }
    else {
      break;
    }

    $count++;
  }

  \Drupal::logger('img_processor:cron')->log(RfcLogLevel::DEBUG, t('[@queue] Processed @count items.', [
    '@count' => ($count - 1),
    '@queue' => $queue_id,
  ]));
}
