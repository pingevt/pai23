<?php

/**
 * @file
 * Theming functionality for PAI Theme.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_region().
 */
function pai_preprocess_region(&$variables) {
  $variables['attributes']['class'][] = "region";
  $variables['attributes']['class'][] = "region--" . $variables['elements']['#region'];

  // \Drupal::messenger()->addMessage("hello", "error", FALSE);
  // \Drupal::messenger()->addMessage("hello", "warning", TRUE);
  // \Drupal::messenger()->addMessage("hello", "status", TRUE);
  // \Drupal::messenger()->addMessage("hello", "log", TRUE);
}

/**
 * Implements hook_preprocess_page_title().
 */
function pai_preprocess_page_title(&$variables) {

  $variables['subtitle'] = NULL;

  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node) && !empty($node) && !is_object($node)) {
    $node = Node::load($node);
  }

  // Check for display title.
  if ($node && $node->hasField('field_display_title') && !$node->field_display_title->isEmpty()) {
    $variables['title'] = $node->field_display_title->view('full');
  }

  // Set Subtitle.
  if ($node && $node->bundle() == "article") {
    if (!$node->field_subtitle->isEmpty()) {
      $variables['subtitle'] = $node->field_subtitle->view('full');
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function pai_preprocess_menu(array &$variables) {
  if ($variables['menu_name'] == 'social-menu') {
    foreach ($variables['items'] as $idx => &$item) {
      $menu_entity = $item['entity'];
      $icon_field = $menu_entity->get('field_icon');
      $variables['items'][$idx]['icon'] = Markup::create($icon_field->entity->field_svg_data->value);

      $item['url']->mergeOptions([
        'attributes' => [],
      ]);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function pai_preprocess_node(array &$variables) {
  $node = $variables['elements']['#node'];
  $bundle = $node->bundle();

  $variables['content_attributes']['class'][] = "node-content";

  if ($node->hasField('field_display_title')) {
    // Title.
    $title = $node->label();
    $display_title = $node->field_display_title->getValue();

    if (!empty($display_title)) {
      $display_title = current($display_title);
      $title = preg_replace("/<\\/?p(.|\\s)*?>/", "", $display_title['value']);
      $variables['label'] = Markup::create($title);
    }
  }

  // ksm($variables);

  switch ($bundle) {
    case 'article':

      if (!$node->field_tags->isEmpty()) {
        $variables['attributes']['class'][] = "u-tag-theme--" . $node->field_tags->entity->field_theme_slug->value;
      }

      if ($variables['view_mode'] == "full") {
        $variables['meta_attributes'] = [
          'class' => [
            'node-meta'
          ]
        ];

        $variables['meta_attributes'] = new Attribute($variables['meta_attributes']);
      }

      break;
  }
}


/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function pai_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  // $paragraph = $variables['elements']['#paragraph'];
  // $suggestions[] = "paragraph__" . $paragraph->parent_field_name->value . "__" . $paragraph->bundle();
}
/**
 * Implements hook_preprocess_paragraph().
 */
function pai_preprocess_paragraph(array &$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $bundle = $paragraph->bundle();

  switch ($bundle) {
    case 'media':
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');
      $mini = ($paragraph->field_make_mini->value == 1);
      $no_crop = ($paragraph->field_no_crop->value == 1);

      $forced_display = NULL;
      if (!$paragraph->field_display->isEmpty()) {
        $val = $paragraph->field_display->target_id;
        $val = explode(".", $val);
        if ($val[0] == "media") {
          $forced_display = $val[1];
        }
      }

      if ($no_crop) {
        $variables['attributes']['class'][] = "c-image--no-crop";
      }

      $media_count = $paragraph->field_media->count();
      $variables['attributes']['class'][] = "c-image--count--" . $media_count;
      if ($media_count > 1 && !$no_crop) {
        // Add component class.
        $variables['attributes']['class'][] = "c-image-gallery";

        if ($mini) {
          $variables['attributes']['class'][] = "c-image-gallery--mini";

          $flip_flop = [
            "image_gallery_16x9",
            "image_gallery_1x1",
            "image_gallery_4x3",
            "image_gallery_4x3",
            "image_gallery_1x1",
            "image_gallery_16x9",
          ];
        }
        else {
          $flip_flop = [
            "image_gallery_16x9",
            "image_gallery_1x1",
            "image_gallery_1x1",
            "image_gallery_16x9",
          ];
        }
        $referenced_entities = $paragraph->field_media->referencedEntities();

        if ($media_count % 2 == 1  && !$mini) {
          $ext = array_shift($referenced_entities);
          $variables['data']['image_data'][] = [
            'entity' => $view_builder->view($ext, "image_gallery_16x9"),
            'class' => "image-gallery-full",
          ];
        }

        $ffx = $mini? 6 : 4;
        foreach ($referenced_entities as $k => $img) {
          $display_mode = $flip_flop[$k % $ffx];
          $variables['data']['image_data'][] = [
            'entity' => $view_builder->view($img, $display_mode),
            'class' => str_replace(["_", "x"], "-", $display_mode),
          ];
        }
      }
      else if ($forced_display !== NULL) {
        foreach (Element::children($variables['content']['field_media']) as $ckey) {
          $variables['content']['field_media'][$ckey] = $view_builder->view($variables['content']['field_media'][$ckey]['#media'], $forced_display);
        }
      }

      break;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function pai_preprocess_field(array &$variables) {
  // if ($variables['field_name'] == "field_client") ksm($variables);
}

/**
 * Implements hook_preprocess_media().
 */
function pai_preprocess_media(array &$variables) {
  $media = $variables['media'];

  // For teaser images, which will be links, we need to set alt to an empty string.
  if ($variables['view_mode'] == "teaser") {
    foreach (Element::children($variables['content']['field_media_image']) as $idx) {
      $values = $variables['content']['field_media_image'][$idx]['#item']->getValue();
      $values['alt'] = "";
      $variables['content']['field_media_image'][$idx]['#item']->setValue($values);
    }
  }

  switch ( $media->bundle()) {
    case 'remote_video':
      // Grab aspect ratio, if we can.
      // Default to 16x9.
      $variables['aspect'] = 56.25;

      $width = $media->field_resource_width->value;
      $height = $media->field_resource_height->value;

      // Check so we don't devide by zero.
      try {
        if ($width && $height && $width !== 0) {
          $variables['aspect'] = $height / $width * 100;
        }
      }
      catch (\Exception $e) {
        \Drupal::logger('pai')->error($e->message());
      }

      break;

    case 'video':

      $width = $media->field_resource_width->value;
      $height = $media->field_resource_height->value;

      foreach (Element::children($variables['content']['field_media_video_file']) as $key) {
        $variables['content']['field_media_video_file'][$key]['#attributes']->setAttribute("width", $width);
        $variables['content']['field_media_video_file'][$key]['#attributes']->setAttribute("height", $height);
      }

      break;
  }
}

/**
 * Implements hook_preprocess_responsive_image_formatter().
 */
function pai_preprocess_responsive_image_formatter(array &$variables) {
  // ksm($variables);
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function pai_preprocess_responsive_image(array &$variables) {
  // ksm($variables);
}

/**
 * Implements hook_preprocess_image().
 */
function pai_preprocess_image(array &$variables) {
  // ksm($variables);
}

/**
 * Implements hook_preprocess_file_video().
 */
function pai_preprocess_file_video(array &$variables) {
  // ksm($variables);
}

/**
 * Implements hook_preprocess_layout().
 */
function pai_preprocess_layout(array &$variables) {
  // Remove empty sections completely from content array.
  foreach (Element::children($variables['content']) as $key) {
    if (empty(Element::children($variables['content'][$key]))) {
      unset($variables['content'][$key]);
    }
  }
}
