<?php

/**
 * @file
 * Theming functionality for PAI Theme.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_region().
 */
function pai_preprocess_region(&$variables) {
  $variables['attributes']['class'][] = "region";
  $variables['attributes']['class'][] = "region--" . $variables['elements']['#region'];

  // \Drupal::messenger()->addMessage("hello", "error", FALSE);
  // \Drupal::messenger()->addMessage("hello", "warning", TRUE);
  // \Drupal::messenger()->addMessage("hello", "status", TRUE);
  // \Drupal::messenger()->addMessage("hello", "log", TRUE);
}

/**
 * Implements hook_preprocess_page_title().
 */
function pai_preprocess_page_title(&$variables) {

  $variables['subtitle'] = NULL;

  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node) && !empty($node) && !is_object($node)) {
    $node = Node::load($node);

  }


  if ($node && $node->bundle() == "article") {

    if (!$node->field_subtitle->isEmpty()) {
      $variables['subtitle'] = $node->field_subtitle->view('full');
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function pai_preprocess_menu(array &$variables) {
  if ($variables['menu_name'] == 'social-menu') {
    foreach ($variables['items'] as $idx => &$item) {
      $menu_entity = $item['entity'];
      $icon_field = $menu_entity->get('field_icon');
      $variables['items'][$idx]['icon'] = Markup::create($icon_field->entity->field_svg_data->value);

      $item['url']->mergeOptions([
        'attributes' => [],
      ]);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function pai_preprocess_node(array &$variables) {
  $node = $variables['elements']['#node'];
  $bundle = $node->bundle();

  $variables['content_attributes']['class'][] = "node-content";

  if ($node->hasField('field_display_title')) {
    // Title.
    $title = $node->label();
    $display_title = $node->field_display_title->getValue();

    if (!empty($display_title)) {
      $display_title = current($display_title);
      $title = preg_replace("/<\\/?p(.|\\s)*?>/", "", $display_title['value']);
      $variables['label'] = Markup::create($title);
    }
  }

  // ksm($variables);
}

/**
 * Implements hook_preprocess_media().
 */
function pai_preprocess_media(array &$variables) {
  $media = $variables['media'];

  // For teaser images, which will be links, we need to set alt to an empty string.
  if ($variables['view_mode'] == "teaser") {
    foreach (Element::children($variables['content']['field_media_image']) as $idx) {
      $values = $variables['content']['field_media_image'][$idx]['#item']->getValue();
      $values['alt'] = "";
      $variables['content']['field_media_image'][$idx]['#item']->setValue($values);
    }
  }

  switch ( $media->bundle()) {
    case 'remote_video':
      // Grab aspect ratio, if we can.
      // Default to 16x9.
      $variables['aspect'] = 56.25;

      $width = $media->field_resource_width->value;
      $height = $media->field_resource_height->value;

      // Check so we don't devide by zero.
      try {
        if ($width && $height && $width !== 0) {
          $variables['aspect'] = $height / $width * 100;
        }
      }
      catch (\Exception $e) {
        ksm($e);
      }

      break;
  }
}

/**
 * Implements hook_preprocess_responsive_image_formatter().
 */
function pai_preprocess_responsive_image_formatter(array &$variables) {
  // ksm($variables);
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function pai_preprocess_responsive_image(array &$variables) {
  // ksm($variables);
}

/**
 * Implements hook_preprocess_image().
 */
function pai_preprocess_image(array &$variables) {
  // ksm($variables);
}
